{"version":3,"sources":["components/timer-form/TimerForm.tsx","ui/Content/Content.tsx","components/countdown/CountdownTimer.tsx","components/countdown/IntervalTimer.tsx","containers/HangboardTimer/HangboardTimer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Form","styled","form","_templateObject","TimerForm","_ref","onSubmit","_useState","useState","_useState2","Object","slicedToArray","setsCount","setSetsCount","_useState3","_useState4","repsCount","setRepsCount","_useState5","_useState6","hangTimeMs","setHangTimeMs","_useState7","_useState8","restTimeMs","setRestTimeMs","react_default","a","createElement","e","preventDefault","value","onChange","parseInt","target","type","div","Content_templateObject","props","theme","breakpoints","phone","Container","CountdownTimer_templateObject","Button","button","_templateObject2","TimerText","span","_templateObject3","CountdownTimer","milliseconds","onComplete","_ref$autoStart","autoStart","msRemaining","setMsRemaining","isRunning","setIsRunning","useEffect","previousTime","Date","now","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","currentTime","timeDelta","console","log","millis","minutes","Math","floor","seconds","toFixed","millisToMinutesAndSeconds","onClick","IntervalTimer","index","setIndex","setAutoStart","key","length","HangboardTimer","showForm","setShowForm","timerData","setTimerData","intervals","data","i","j","concat","toConsumableArray","getIntervals","Content","tablet","desktop","App","styled_components_browser_esm","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iYAUA,IAAMA,EAAOC,IAAOC,KAAVC,KAKK,SAASC,EAATC,GAAuE,IAAnDC,EAAmDD,EAAnDC,SAAmDC,EAChDC,mBAAS,GADuCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC3EK,EAD2EH,EAAA,GAChEI,EADgEJ,EAAA,GAAAK,EAEhDN,mBAAS,GAFuCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE3EE,EAF2ED,EAAA,GAEhEE,EAFgEF,EAAA,GAAAG,EAG9CV,mBAAS,KAHqCW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAG3EE,EAH2ED,EAAA,GAG/DE,EAH+DF,EAAA,GAAAG,EAI9Cd,mBAAS,MAJqCe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAI3EE,EAJ2ED,EAAA,GAI/DE,EAJ+DF,EAAA,GAMlF,OACIG,EAAAC,EAAAC,cAAC5B,EAAD,CAAMM,SAAU,SAAAuB,GACZA,EAAEC,iBACFxB,GAAYA,EAAS,CACjBM,YACAI,YACAI,aACAI,iBAGJE,EAAAC,EAAAC,cAAA,8BACkBF,EAAAC,EAAAC,cAAA,WACdF,EAAAC,EAAAC,cAAA,SACIG,MAAOnB,EACPoB,SAAU,SAAAH,GAAC,OAAIhB,EAAaoB,SAASJ,EAAEK,OAAOH,SAC9CI,KAAK,YAGbT,EAAAC,EAAAC,cAAA,8BACkBF,EAAAC,EAAAC,cAAA,WACdF,EAAAC,EAAAC,cAAA,SACIG,MAAOf,EACPgB,SAAU,SAAAH,GAAC,OAAIZ,EAAagB,SAASJ,EAAEK,OAAOH,SAC9CI,KAAK,YAGbT,EAAAC,EAAAC,cAAA,yBACaF,EAAAC,EAAAC,cAAA,WACTF,EAAAC,EAAAC,cAAA,SACIG,MAAOX,EACPY,SAAU,SAAAH,GAAC,OAAIR,EAAcY,SAASJ,EAAEK,OAAOH,SAC/CI,KAAK,YAGbT,EAAAC,EAAAC,cAAA,yBACaF,EAAAC,EAAAC,cAAA,WACTF,EAAAC,EAAAC,cAAA,SACIG,MAAOP,EACPQ,SAAU,SAAAH,GAAC,OAAIJ,EAAcQ,SAASJ,EAAEK,OAAOH,SAC/CI,KAAK,YAGbT,EAAAC,EAAAC,cAAA,UAAQO,KAAK,UAAb,0IC7DGlC,UAAOmC,IAAtBC,IAGI,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,YAAYC,kYCMrC,IAAMC,EAAYzC,IAAOmC,IAAVO,KAOTC,EAAS3C,IAAO4C,OAAVC,KAKNC,EAAY9C,IAAO+C,KAAVC,KAIA,SAASC,EAAT7C,GAQZ,IAPC8C,EAOD9C,EAPC8C,aACAC,EAMD/C,EANC+C,WAMDC,EAAAhD,EALCiD,iBAKD,IAAAD,KAAA9C,EACuCC,mBAAS2C,GADhD1C,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACQgD,EADR9C,EAAA,GACqB+C,EADrB/C,EAAA,GAAAK,EAEmCN,mBAAS8C,GAF5CvC,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEQ2C,EAFR1C,EAAA,GAEmB2C,EAFnB3C,EAAA,GAIC4C,oBAAU,WACNH,EAAeL,IAChB,CAACA,IAEJQ,oBAAU,WACND,EAAaJ,IACd,CAACA,IAEJ,IAAIM,EAAeC,KAAKC,MAsBxB,OAUG,SAAqBC,EAAsBC,GAC9C,IAAMC,EAAgBC,mBAGtBP,oBAAU,WACNM,EAAcE,QAAUJ,GACzB,CAACA,IAGJJ,oBAAU,WAIN,GAAc,OAAVK,EAAgB,CAChB,IAAII,EAAKC,YAJb,WACIJ,EAAcE,WAGaH,GAC3B,OAAO,kBAAMM,cAAcF,MAEhC,CAACJ,IAhDJO,CACI,WACI,IAAMC,EAAcX,KAAKC,MACnBW,EAAYD,EAAcZ,EAChC,GAAIL,EAAckB,GAAa,EAS3B,OARAjB,EAAe,GACfE,GAAa,QAETN,IACAsB,QAAQC,IAAI,kBACZvB,MAKRI,EAAeD,EAAckB,GAC7Bb,EAAeY,GAEnBf,EAAY,GAAK,MAIjB/B,EAAAC,EAAAC,cAACc,EAAD,KACIhB,EAAAC,EAAAC,cAACmB,EAAD,KA4BZ,SAAmC6B,GAC/B,IAAMC,EAAUC,KAAKC,MAAMH,EAAS,KAC9BI,EAAU/C,UAAW2C,EAAS,IAAS,KAAMK,QAAQ,IAC3D,OAAmB,KAAZD,EACDH,EAAU,EAAI,MACdA,EAAU,KAAOG,EAAU,GAAK,IAAM,IAAMA,EAjC9BE,CAA0B3B,IACtC7B,EAAAC,EAAAC,cAACgB,EAAD,CAAQuC,QAAS,kBAAMzB,GAAcD,KAChCA,EAAY,QAAU,UCtExB,SAAS2B,EAAT/E,GAMZ,IALC8C,EAKD9C,EALC8C,aACAC,EAID/C,EAJC+C,WAID7C,EAC2BC,mBAAS,GADpCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACQ8E,EADR5E,EAAA,GACe6E,EADf7E,EAAA,GAAAK,EAEmCN,oBAAS,GAF5CO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEQwC,EAFRvC,EAAA,GAEmBwE,EAFnBxE,EAAA,GAIC,OACIW,EAAAC,EAAAC,cAACsB,EAAD,CACIsC,IAAKH,EACL/B,UAAWA,EACXH,aAAcA,EAAakC,GAC3BjC,WAAY,WACJiC,EAAQ,EAAIlC,EAAasC,QACzBH,EAASD,EAAQ,GACjBE,GAAa,KAETnC,GACAA,IAEJsB,QAAQC,IAAI,2BACZY,GAAa,OCpBlB,SAASG,IAAiB,IAAAnF,EACLC,oBAAS,GADJC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC9BoF,EAD8BlF,EAAA,GACpBmF,EADoBnF,EAAA,GAAAK,EAEHN,mBAAS,CACvCY,WAAY,EACZI,WAAY,EACZR,UAAW,EACXJ,UAAW,IANsBG,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE9B+E,EAF8B9E,EAAA,GAEnB+E,EAFmB/E,EAAA,GAS/BgF,EAaV,SAAsBC,GAElB,IADA,IAAID,EAAsB,GACjBE,EAAI,EAAGA,EAAID,EAAKpF,YAAaqF,EAClC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAKhF,YAAakF,EAClCH,EAAS,GAAAI,OAAAzF,OAAA0F,EAAA,EAAA1F,CAAOqF,GAAP,CAAkBC,EAAK5E,WAAY4E,EAAKxE,aAGzD,OAAOuE,EApBWM,CAAaR,GAE/B,OACInE,EAAAC,EAAAC,cAAC0E,EAAD,KACMX,GAAYjE,EAAAC,EAAAC,cAACxB,EAAD,CAAWE,SAAU,SAAC0F,GAChCF,EAAaE,GACbJ,GAAY,OAEbD,GAAYjE,EAAAC,EAAAC,cAACwD,EAAD,CAAejC,aAAc4C,KCnBxD,IAAMxD,EAAQ,CACZC,YAAa,CACXC,MAAO,4BACP8D,OAAQ,4BACRC,QAAS,+BAcEC,mLARX,OACE/E,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAenE,MAAOA,GACpBb,EAAAC,EAAAC,cAAC8D,EAAD,cAJUiB,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxF,EAAAC,EAAAC,cAACuF,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dfb6ccf8.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface TimerData {\r\n    setsCount: number,\r\n    repsCount: number,\r\n    hangTimeMs: number,\r\n    restTimeMs: number\r\n}\r\n\r\nconst Form = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nexport default function TimerForm({onSubmit}: {onSubmit?: (data: TimerData) => void}) {\r\n    const [setsCount, setSetsCount] = useState(1);\r\n    const [repsCount, setRepsCount] = useState(6);\r\n    const [hangTimeMs, setHangTimeMs] = useState(10000);\r\n    const [restTimeMs, setRestTimeMs] = useState(2 * 60 * 1000);\r\n\r\n    return(\r\n        <Form onSubmit={e => {\r\n            e.preventDefault();\r\n            onSubmit && onSubmit({\r\n                setsCount,\r\n                repsCount,\r\n                hangTimeMs,\r\n                restTimeMs\r\n            });\r\n        }}>\r\n            <label>\r\n                Number of sets<br></br>\r\n                <input\r\n                    value={setsCount}\r\n                    onChange={e => setSetsCount(parseInt(e.target.value))}\r\n                    type=\"number\"\r\n                />\r\n            </label>\r\n            <label>\r\n                Number of reps<br></br>\r\n                <input\r\n                    value={repsCount}\r\n                    onChange={e => setRepsCount(parseInt(e.target.value))}\r\n                    type=\"number\"\r\n                />\r\n            </label>\r\n            <label>\r\n                Hang time<br></br>\r\n                <input\r\n                    value={hangTimeMs}\r\n                    onChange={e => setHangTimeMs(parseInt(e.target.value))}\r\n                    type=\"number\"\r\n                />\r\n            </label>\r\n            <label>\r\n                Rest time<br></br>\r\n                <input\r\n                    value={restTimeMs}\r\n                    onChange={e => setRestTimeMs(parseInt(e.target.value))}\r\n                    type=\"number\"\r\n                />\r\n            </label>\r\n            <button type=\"submit\">Update</button>\r\n        </Form>\r\n    )\r\n}","import styled from 'styled-components';\r\n\r\nexport default styled.div`\r\n  margin: 0 20% 0 20%;\r\n\r\n  ${props => props.theme.breakpoints.phone} {\r\n    margin: 0;\r\n  }\r\n`","import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n    export type TIMER_FORMAT =\r\n        | 'mm:ss:SS'\r\n        | 'mm:ss:S'\r\n        | 'mm:ss'\r\n        | 'm:ss:SS'\r\n        | 'm:ss:S'\r\n        | 'm:ss';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    width: 100px;\r\n    height: 50px;\r\n`;\r\n\r\nconst TimerText = styled.span`\r\n    font-size: 64px;\r\n`;\r\n\r\nexport default function CountdownTimer({\r\n    milliseconds,\r\n    onComplete,\r\n    autoStart = false,\r\n}: {\r\n    milliseconds: number;\r\n    onComplete?: () => void;\r\n    autoStart?: boolean;\r\n}) {\r\n    const [msRemaining, setMsRemaining] = useState(milliseconds);\r\n    const [isRunning, setIsRunning] = useState(autoStart);\r\n\r\n    useEffect(() => {\r\n        setMsRemaining(milliseconds);\r\n    }, [milliseconds]);\r\n\r\n    useEffect(() => {\r\n        setIsRunning(autoStart);\r\n    }, [autoStart]);\r\n\r\n    let previousTime = Date.now();\r\n    useInterval(\r\n        () => {\r\n            const currentTime = Date.now();\r\n            const timeDelta = currentTime - previousTime;\r\n            if (msRemaining - timeDelta <= 0) {\r\n                setMsRemaining(0);\r\n                setIsRunning(false);\r\n\r\n                if (onComplete) {\r\n                    console.log('Timer complete');\r\n                    onComplete();\r\n                }\r\n\r\n                return;\r\n            }\r\n            setMsRemaining(msRemaining - timeDelta);\r\n            previousTime = currentTime;\r\n        },\r\n        isRunning ? 10 : null\r\n    );\r\n\r\n    return (\r\n        <Container>\r\n            <TimerText>{millisToMinutesAndSeconds(msRemaining)}</TimerText>\r\n            <Button onClick={() => setIsRunning(!isRunning)}>\r\n                {isRunning ? 'Pause' : 'Start'}\r\n            </Button>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport function useInterval(callback: () => void, delay: number | null) {\r\n    const savedCallback = useRef<any>();\r\n\r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    // Set up the interval.\r\n    useEffect(() => {\r\n        function tick() {\r\n            savedCallback.current();\r\n        }\r\n        if (delay !== null) {\r\n            let id = setInterval(tick, delay);\r\n            return () => clearInterval(id);\r\n        }\r\n    }, [delay]);\r\n}\r\n\r\nfunction millisToMinutesAndSeconds(millis: number) {\r\n    const minutes = Math.floor(millis / 60000);\r\n    const seconds = parseInt(((millis % 60000) / 1000).toFixed(0));\r\n    return seconds === 60\r\n        ? minutes + 1 + ':00'\r\n        : minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n}\r\n","import React, { useState } from 'react';\r\nimport CountdownTimer from './CountdownTimer';\r\n\r\nexport default function IntervalTimer({\r\n    milliseconds,\r\n    onComplete,\r\n}: {\r\n    milliseconds: number[];\r\n    onComplete?: () => void;\r\n}) {\r\n    const [index, setIndex] = useState(0);\r\n    const [autoStart, setAutoStart] = useState(false);\r\n\r\n    return (\r\n        <CountdownTimer\r\n            key={index}\r\n            autoStart={autoStart}\r\n            milliseconds={milliseconds[index]}\r\n            onComplete={() => {\r\n                if (index + 1 < milliseconds.length) {\r\n                    setIndex(index + 1);\r\n                    setAutoStart(true);\r\n                } else {\r\n                    if (onComplete) {\r\n                        onComplete();\r\n                    }\r\n                    console.log('Interval timer finished');\r\n                    setAutoStart(false);\r\n                }\r\n            }}\r\n        />\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport TimerForm from '../../components/timer-form/TimerForm';\r\nimport Content from '../../ui/Content/Content';\r\nimport { TimerData } from '../../components/timer-form/TimerForm';\r\nimport IntervalTimer from '../../components/countdown/IntervalTimer';\r\n\r\nexport default function HangboardTimer() {\r\n    const [showForm, setShowForm] = useState(true);\r\n    const [timerData, setTimerData] = useState({\r\n        hangTimeMs: 0,\r\n        restTimeMs: 0,\r\n        repsCount: 1,\r\n        setsCount: 1\r\n    });\r\n    \r\n    const intervals = getIntervals(timerData);\r\n\r\n    return(\r\n        <Content>\r\n            { showForm && <TimerForm onSubmit={(data: TimerData) => {\r\n                setTimerData(data);\r\n                setShowForm(false);\r\n            }} />}\r\n            { !showForm && <IntervalTimer milliseconds={intervals}></IntervalTimer>}\r\n        </Content>\r\n    );\r\n}\r\n\r\nfunction getIntervals(data: TimerData) {\r\n    let intervals: number[] = [];\r\n    for (let i = 0; i < data.setsCount; ++i) {\r\n        for (let j = 0; j < data.repsCount; ++j) {\r\n            intervals = [...intervals, data.hangTimeMs, data.restTimeMs];\r\n        }\r\n    }\r\n    return intervals;\r\n}","import React, { Component } from 'react';\nimport { ThemeProvider } from 'styled-components';\n\nimport HangboardTimer from './containers/HangboardTimer/HangboardTimer';\n\nconst theme = {\n  breakpoints: {\n    phone: '@media (max-width: 599px)',\n    tablet: '@media (min-width: 600px)',\n    desktop: '@media (min-width: 1200px)'\n  }\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <HangboardTimer />\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}